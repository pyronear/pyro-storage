name: tests

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build & run docker
        env:
          QARNOT_TOKEN: ${{ secrets.QARNOT_TOKEN }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          BUCKET_MEDIA_FOLDER: ${{ secrets.BUCKET_MEDIA_FOLDER }}
          BUCKET_ANNOT_FOLDER: ${{ secrets.BUCKET_ANNOT_FOLDER }}
        run: docker-compose up -d --build
      - name: Install dependencies in docker
        run: |
          docker-compose exec -T pyrostorage python -m pip install --upgrade pip
          docker-compose exec -T pyrostorage pip install -r requirements-dev.txt
      - name: Run docker test
        run: |
          docker-compose exec -T pyrostorage coverage --version
          docker-compose exec -T pyrostorage coverage run -m pytest tests/
          docker-compose exec -T pyrostorage coverage xml
          docker cp pyro-storage_pyrostorage_1:/app/coverage.xml .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true

  pytest-client:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Build & run API server
        env:
          QARNOT_TOKEN: ${{ secrets.QARNOT_TOKEN }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          BUCKET_MEDIA_FOLDER: ${{ secrets.BUCKET_MEDIA_FOLDER }}
          BUCKET_ANNOT_FOLDER: ${{ secrets.BUCKET_ANNOT_FOLDER }}
        run: |
          docker-compose up -d --build
          docker ps
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
          architecture: x64
      - name: Cache python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python }}-${{ hashFiles('client/pyproject.toml') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e "client/.[test]"
      - name: Run client unittests
        run: |
          coverage --version
          sleep 5
          cd client && coverage run -m pytest tests/

  headers:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Check the headers
        uses: frgfm/validate-python-headers@main
        with:
          license: 'Apache-2.0'
          owner: 'Pyronear'
          starting-year: 2022
          folders: 'src,client,.github'
          ignores: 'version.py,__init__.py'
